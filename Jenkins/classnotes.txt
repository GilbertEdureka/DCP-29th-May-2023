			
			
###############
Day 8
7th June 2023
###############				
			
			
			
		1. Installation of Jenkins	
				Working with Jenkins
				
			Jenkins_Master		--> Install Jenkins & Create Jenkins Project 
			
					Build Java Application Team --> Build --> Install build tools, unit testing tool, 
					
					
			Jenkins Master & Slave Architecture :::
			
			Jenkins Master 	--> Used to create Jenkins Jobs/Project/Pipelines 
							-->	Schedule the Jobs to Slave Machines 
							
			Jenkins Slave 	--> Used to actually execute/run the Jenkins Jobs/Project				

			Jenkins Master
				- Slave1	--> Java build 			--
				- Slave2	--> Python Build 
				- Slave3	--> .Net
				- Slave4	--> Angular
				- Slave5	--> NodeJS
			 
			Using Jenkins Master & Slave Architecture we can distribute the workload.
			
			
		AWS Platform ::: Launch AWS EC2 Instances - Ubuntu
		
			Launch 2 VMs 
			
			Master 	-> Install Jenkins 
			
		- Access to AWS 
		- Connect to EC2 Instance :::
			- EC2 Instance Connect 
			- SSH Client in ur local Machine 	==> Tool used to connect with any remote servers
				MobaXterm	-	for windows machine 
					https://mobaxterm.mobatek.net/download.html
				Putty		Mac Users
			- Terminal		Mac Users / Linux 
				
				
		AWS --> run a instance for 750 hrs / month
		
		10 Instances --> 75 hrs 
		
		
		apt ==> is a package manager for ubuntu machine
		
		Linux 
		
			apt 	ubuntu 
			yum 	rhel centos 
			rpm
			dnf 
		
		
		Install Jenkins :::: 
		
			https://www.jenkins.io/doc/book/installing/


sudo apt update
sudo apt install openjdk-11-jre
java -version


curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins


	Jenkins run as a service ==> by default runs in port 8080 
	
	
	Access Jenkins Server ::::
	
		Post Installation activities :::
		
	
	/var/lib/jenkins
	
	
	Plugins are just an extension


	Jenkins Project :::
	
		- Freestyle Project 	-- Manual Config. 
		- Pipeline Project 		-- Automated.
			
			Java application 
			perform build 



		Jenkins Variables :::

			Environment Variables
			User Defined Variables 



		to deploy the appln. 
		
			Dev / QA / UAT / Pre-prod / prod



Next :::

		- Pipeline Project 		-- Automated.
			
			Java application 
			perform build,
			create artifact 
			slave1..

		systemctl start jenkins
		systemctl stop jenkins
		systemctl restart jenkins
		systemctl status jenkins


			
###############
Day 9
8th June 2023
###############	

		- Pipeline Project 		-- Automated.
			
			Java application 
			perform build,
			create artifact 
			slave1...


	
		Jenkins Pipeline :::
		
			- Scripted Pipeline 
			
			- Declarative Pipeline (uses yaml script)
			
pipeline {
	agent any        --(the target envi where you will run the job)

	stages {
		stage('SCM Checkout') {
			steps {
				echo 'Hello World'
			}
		}
		stage('Java App Build') {
			steps {
				echo 'Hello Team'
			}
		}
		stage('Deploy to QA Server') {
			steps {
				echo 'Deploy to QA'
			}
		}
	}
}






CICD Workflow ::::

		Dev Envi. ==> Developers create the src code & push the src code into src code repository.(github)
		
		Jenkins Pipeline :::
		
			SCM Checkout Stage
				
				
			Build & Create Artifacts 
					Build is a process of compiling the src code and creating artifacts. 
					
						Maven - Build Tool 
							Install Maven ==> 
							Maven Goals ==> Clean,package,test,build....
							pom.xml ===> Maven uses it to perform build, Identifies the depedencies and for the java app
			
			Automated Unit Testing 
			Deploy to QA Envi.



Configure Jenkins Master & Slave Machines..


		Jenkins_Master 		
			Slave Machines 			
					Login to Slave Machine :
							Install all the required build tools 
									git,jdk,maven
					Create User & SSH Keys

		Attach the Slave Machine in Jenkins as a Node/Agent.
				using SSH Key based Authentication(to establish connection btw the master and slave servers)
				
				- Password based 
				- tokens based 
				- passwordless Authentication / SSH-Key based auth.
		
		Create the CI Pipeline to automate build 




Java Maven Web Application ==> Project src code in github repo. 



Install GIT : (BUT GIT IS ALREADY INSTALLED IN UBUNTU)

	sudo apt install git -y
        Configure Slave Node1 for Java Maven App. :

Install Java :: (PREREQUISITE FOR MAVEN)

	sudo apt update -y 
	sudo apt install openjdk-11-jre -y
	java -version
Install Maven - Build Tool :
	https://maven.apache.org/install.html

	sudo apt install maven -y (IN UBUNTU)
	mvn -version
	FOR WINDOWS, U NEED TO DEFINE THE ENVI VARIABLES BEFORE INSTALLING


Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 


#Add User : 

	#useradd -m -d /home/devopsadmin devopsadmin
	 #useradd devopsadmin(OTHER DISTRIBUTION)

	useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin (FOR UBUNTU)

su - devopsadmin (LOGIN TO THE USER)
#PWD

Create SSH Keys
	#ssh-keygen

	#for Ubuntu ::
	ssh-keygen -t rsa -b 4096 -m PEM  ---> ls -a 
	

	ls ~/.ssh 

	#You should see following two files:
cd .ssh --->ls	ll to see file and permission
	#id_rsa - private key
	#id_rsa.pub - public
	
	
	cat id_rsa.pub > authorized_keys (CREATE AUTHORIZED KEY )

GIVE admin PERMISSION TO DEVOPSADMIN USER TO ACCESS/read the FILE CONTENT
	chown -R devopsadmin /home/devopsadmin/.ssh 
	chmod 600 /home/devopsadmin/.ssh/authorized_keys
        chmod 700 /home/devopsadmin/.ssh
ll

NOW Attach the Slave Machine in Jenkins as a Node/Agent.
	GOTO JENKINS MASTER---> MANAGE JENKINS----> NODES AND CLOUDS--->NEW NODE (NODE NAME (JAVA_MVN-BUILD_SERVER))-- PERMANENT AGENT----> CREATE ---> CONFIGURATION PAGE (REMOTE ROOT DIRECTORY (/HOME/DEVOPSADMIN), LABEL(MVNBUILDSERVER1), LAUNCH METHOD((VIA SSH), HOST(PRIVATE IP OF HOST MACHINE),CREDENTIALS(ADD-->ADD CREDENTIALS--> KIND(SSH USERNAME WITH PRIVATE KEY) ID(MVNBUIDSERVER1CRED, just for ref)USERNAME(DEVOPSADMIN) PRIVATE KEY ---> ENTER DIRECTLY (GOTO SLAVE MACHINE, SIGN IN THE DEVOPSADMIN USER AND COPY THE PRIVATE KEY AND PASTE IN THE Key textbox ie CD .SSH---> LS---> CAT ID_RSA)ADD)), HOST KEY VERIFICATION STRATEGY( TO ENSURE THAT THE TARGET MACHINE IS A TRUSTED MACHINE(MANUALLY TRUSTED KEY VERIFICATION STRATEGY(It checks if the authorized key is the same as the public key in the slave achine)) ---> CHECK THE BOX FOR REQUIRE MANUAL..) ---SAVE.
TO LAUNCH THE NODE--> CLICK ON THE NODE/AGENT---> TRUST SSH HOST KEY(ONETIME VERIFICATION)-->YES


https://github.com/LoksaiETA/Java-mvn-app2.git ---> 

TO RUN JOB IN SLAVE MACHINE, REPLACE AGENT AS ANY WITH THE LABEL FROM THE SLAVE WE CREATED

SCM CHECKOUT STAGE--> Gotot to snippet generator----> select git----> put in the url for the repo--- select the branch--> generate script
MAVEN BUILD STAGE --> Goto Manage jenkins---> tools --> scroll down to Maven (add Maven (name(maven)--> maven_home((/usr/share/maven)got the path from our slave node by using #maven -version) ---> save. Now goto pipelineand add the tool part (tool(
pipeline {
	agent { label 'mvnbuildserver1' }

    tools {
        maven "maven"
    }

	stages {
		stage('SCM Checkout') {
			steps {
				echo 'SCM CHECKOUT'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'

			}
		}
		stage('Java App Build') {
			steps {
				echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true clean package'
			}
		}
		stage('Deploy to QA Server') {
			steps {
				echo 'Deploy to QA'
				echo 'Hello Everyone'
			}
		}
	}
}


###############
Day 10
9th June 2023
###############	


			Jenkins_Master 
				Slave - Java webappln. Build --> Artifacts.
				
			Target Server / Hosted Servers 	VM / Computing Device.
			
				QA	VM --> Application Server - tomcat / nginx 
				
				UAT VM --> Application Server - tomcat / nginx 
				
				PROD VM --> Application Server - tomcat / nginx 
				
				
			Jenkins_Master 
				Slave - Java webappln. Build --> Artifacts.
			
			Launch Test_Server : (VM)
				Install jdk / Tomcat Application Server 	-	runs in port 8080

	Install Java ::

	sudo apt update -y 
	sudo apt install openjdk-11-jre -y
	java -version
	
	
	/usr/lib/jvm/java-11-openjdk-amd64
	
	Create Environment Variable :;
	
export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

######################Install TOMCAT Application Server on Ubuntu :::

sudo apt update
sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#cd /usr/lib/jvm/java-11-openjdk-amd64/ ---> pwd---> copy the path

CREATE ENVIRONMENT VARIABLE BY EDITING THE FILE ( USE THE PATH INORDER TO MAKE TOMCAT ACCESS JAVA)
	vi /etc/profile ---> ADD 
	export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
	PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
	source /etc/profile

Install Tomcat ::
	GO TO GOOGLE -->TOMCAT.APACHE.ORG---> DOWNLOWDS--->VERSION8---> RIGHT CLICK ON TARZ.GZ(https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.88/bin/apache-tomcat-8.5.88.tar.gz)
	cd /opt
	wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.88/bin/apache-tomcat-8.5.88.tar.gz (TO DOWNLOWD FILE)
	tar -xvzf /opt/apache-tomcat-8.5.88.tar.gz (TO EXTRACT FILE)

	mv apache-tomcat-8.5.88 tomcat (CHANGE THE FOLDER NAME TO TOMCAT)
	LS --> CD TOMCAT/BIN/--> WE SEE FOLDER ((STARTUP SSH) USED TO STARTUP THE TOMCAT SERVER)

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh


###########################################333

		Create User 
		Create SSH key in tomcat server 
	


#Add User : 

	#useradd -m -d /home/devopsadmin devopsadmin
	 #useradd devopsadmin(OTHER DISTRIBUTION)

	useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin (FOR UBUNTU)

su - devopsadmin (LOGIN TO THE USER)
#PWD

Create SSH Keys
	#ssh-keygen

	#for Ubuntu ::
	ssh-keygen -t rsa -b 4096 -m PEM  ---> ls -a 
	

	ls ~/.ssh 

	#You should see following two files:
cd .ssh --->ls	ll to see file and permission
	#id_rsa - private key
	#id_rsa.pub - public
	
	
	cat id_rsa.pub > authorized_keys (CREATE AUTHORIZED KEY )

GIVE admin PERMISSION TO DEVOPSADMIN USER TO ACCESS/read the FILE CONTENT/AUTHORIZED KEY
	chown -R devopsadmin /home/devopsadmin/.ssh 
	chmod 600 /home/devopsadmin/.ssh/authorized_keys
    chmod 700 /home/devopsadmin/.ssh

				
sshPublisher(publishers: [sshPublisherDesc(configName: 'TomcatServer', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])

				
		Deployment means(MOVING ARTIFACTS FROM ONE ENVI, SOURCE TO ANOTHER, TARGET)
			
			
			Source Path	: target/mvn-hello-world.war
			
			Destination Path : /opt/tomcat/webapps/mvn-hello-world.war
												/opt/tomcat/webapps/target/mvn-hello-world.war
			CD ..-->CD /OPT/TOMCAT/--->LS -->CD WEBAPPS/ (PERMISSION DENIED (WE NEED TO HAVE ROOT USER ACCESS))	
				     chown -R devopsadmin /OPT/TOMCAT/WEBAPPS---> LL--->SU - DEVOPSADMIN
					 
Add Tomcat Server to Jenkins Master with valid private key of tomcat user				
CAT id_rsa - private key				 
		In Jenkins :
				Install Publish Over SSH Plugins (TO ADD TOMCAT TO JENKINS)
						go to manage Jenkins -> Plugin Manager -> Available tab -> search for Publish over SSH Plugin --->
						Restart jenkins upon installation(ONLY AFTER RESTART BEFORE JENKINS CAN RECOGNIZE PLUGINS FOR CONFIGURATION) --->
						LOGIN BACK TO JENKINS AFTER RESTART
				
				
				CONFIGURE TOMCAT
						JENKINS MASTER--> SYSTEM--->PUBLISH OVER SSH-->
								SSH SERVERS-->ADD--->SSH SERVER 
														NAME (TOMCAT)-->HOSTNAME(PRIVATE IP FOR TOMCAT) USERNAME(DEVOPSADMIN)-->
														REMOTE DIRECTORY(TARGET PATH(/OPT/TOMCAT/WEBAPPS))---> ADVANCED(CHECK BOX "USE PASSWRD AUTH OR DIFFRNT KEY)
														--->DEVOPSADIN---> CD ./SSH--->LS--->CAT ID_RSA (COPY AND PASTE THE KEY IN KEY TEXTBOX)--->TEST CONFIGURATION
				ONCE TONCAT IS CONFIGURED
					IN JENKINS--->DASHBOARD--->SELECT THE PIPELINE YOU WANT TO ADD THE STEP-->
						CONFIGURE--->PIPELINE--->PIPELINE SCRIPT --->PIPELINE SYNTAX--->SAMPLE STEPS--->SSH PUBLISHER
						-->SSH SERVER(NAME(TOMCAT))--->TRANSFERS--->SOURCE FILES(target/mvn-hello-world.war) --->
						    REMOTE DIRECTORY(USE "." TO REFER TO THE CURRENT DIRECTORY)-->REMOVE PREFIX((TARGET/) SO NOT SUBFOLDER IS CREATED) --->GENERATE PIPELINE SCRIPT

pipeline {
	agent { label 'mvnbuildserver1' }

    tools {
        maven "maven"
    }

	stages {
		stage('SCM Checkout') {
			steps {
				echo 'SCM CHECKOUT'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'

			}
		}
		stage('Java App Build') {
			steps {
				echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true clean package'
			}
              post {
                success {
                  sh "echo 'Send mail on success'"
				  mail bcc: '', body: '"Please go to ${BUILD_URL} and verify the build"', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Build Notification', to: 'loksaieta223@gmail.com'
                }
                failure {
                  sh "echo 'Send mail on failure'"
				  mail bcc: '', body: '"Please go to ${BUILD_URL} and verify the build"', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Build Notification', to: 'loksaieta223@gmail.com'
                }
              }
		}

        stage('Approve - deploy to QA'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }	
	
		stage('Deploy to QA Server') {
			steps {
				echo 'Deploy to QA'
				echo 'Hello Everyone'				
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'TomcatServer', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
			}
		}
	}
}
AFTER RUNNING OUR SCRIPT/PIPELINE --> WE CAN LOGIN TO OUR TERMINAL--->SUDO -I --->SU DEVOPSADMIN---> CD /OPT/TOMCAT/WEBAPPS/--->LL---> WE SEE OUR .WAR FILE.
		TO RUN OUR APP THROUGH TOMCAT--->(PUBLIC IP:8080/ARTIFACT NAME)
							PUBLIC IP:8080/MVN-HELLO-WORLD



	Jenkins Scheduling :::
	
		Build periodic 	-->	
				Used to trigger the job based upon schedule. eg. every min.
		
			dev servers , test servers, Prod servers (24/7)
			8am - 10pm 
			
		Poll SCM 
		
				Used to trigger the job for eg. every 15 mins only if there is any changes happened in src code repo.
				
				repo1 --> dev team -- commit --> 
					Test window -- 8,12,4
					
				8 - 12 
				
				everyday 11am 3pm ==> do a deployment to qa envi.
		
		
		Github Webhook 
				Create github webhook payload url in github.
				
				Enter Jenkins Master URL. eg.:
				http://<public-IP>:8080/github-webhook/
			
				http://15.206.127.38:8080/github-webhook/
				
				for each commit, the pipeline will get triggered. 
				
	NB: TO USE POLL SCM OR GIT WEBHOOK, GIT HAS TO BE INSTALLED IN JENKINS MASTER
				
		Notification ::::
			-- 
		Email - Notification Plugins ::::
		

Email Notification Plugins :::

SMTP Server :
smtp.gmail.com
SMTP Authentication
SMTP Port :: 465
Login to Gmail :::
Click Account Settings
Security 
Create App Token --- 16 


Summary :::

		Jenkins _ Master & Slave 
			Install Jenkins 
			Plugins 
			Manage Jenkins Option 
			Master and slave node config 
			adding eternal server to jenkins using SSH 
			create cicd pipeline 
			



